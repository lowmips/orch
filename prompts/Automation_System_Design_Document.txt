# Automation System Design Document
Date: March 08, 2025
Author: [Your Name] with assistance from Grok 3 (xAI)

### Overview
This system automates tasks using AI-driven peer agents, leveraging xAI's Grok models. All agents run identical code, communicate via JSON over TCP sockets, and interface with Grok and users via API. A separate UI program displays conversations. Agents vary by resources/OS, tracked in a MySQL directory.

### Terminology
- **Agents**: Identical entities, vary by port/resources, handle tasks and user/Grok requests.
- **UI**: Separate program for user interaction, displays agent conversation tabs.
- **Directory**: MySQL database tracking agent details.

### Component Design Principles
- **Program-Based**: Independent peer agents.
- **Asynchronous**: Agents process requests, poll per `config/orchestrator_config.json`.
- **State Awareness**: Tracks states, persists conversations for crash recovery.
- **Conversation Management**: Each Grok-agent interaction is a separate, logged conversation.
- **AI Efficiency**: Agents use Grok concisely via `prompts/agent_grok_prompt.txt`.
- **AI Integration**: Grok primary, acts as de facto user.

### Agent Communication
- **Interface**: Agents on localhost:<port> (e.g., 5001+); UI on localhost:5000.
- **Mechanism**: Async JSON over TCP sockets.
- **Protocol**: JSON, short keys:
  - To Agent: `{ "t": "user_request", "r": "<text>", "c": "<id>" }` → `{ "t": "response", "r": "<text>" }`.
  - List Conversations: `{ "t": "list_conversations" }` → `{ "t": "response", "r": ["<id1>", "<id2>"] }`.
  - Get Conversation: `{ "t": "get_conversation", "c": "<id>" }` → `{ "t": "response", "r": {"history": ["<msg1>"]} }`.
  - Task Status: `{ "t": "s", "i": "<id>", "s": "<state>", "r": "<result>" }`.

### Agent-to-Grok API Communication
- **Mechanism**: Concise JSON via `prompts/agent_grok_prompt.txt`.
- **API Calls** (to localhost:<port>):
  - `{ "t": "query", "call": "list_capabilities" }` → `{ "t": "query_response", "r": ["email", "exec_program"] }`.
  - `{ "t": "query", "call": "list_agents_for_task", "task": "<task>" }` → `{ "t": "query_response", "r": {"task": "<task>", "agents": ["agent-1"]} }`.
  - `{ "t": "query", "call": "get_agent_resources", "agent_id": "<id>" }` → `{ "t": "query_response", "r": {"cpu_cores": 8, ...} }`.
  - `{ "t": "query", "call": "get_agent_system_load", "agent_id": "<id>" }` → `{ "t": "query_response", "r": {"cpu_usage": 12.5, ...} }`.

### Crash Recovery
- **Conversation Persistence**: Agents save conversations to `conversations/<agent_id>/<conversation_id>/state.json`, reload on restart.

### Components
#### Agents
- **Purpose**: General-purpose task execution, Grok/user interfacing.
- **Protocol**: As above, on localhost:<port>.

#### User Interface (UI)
- **Purpose**: Displays conversation tabs, sends requests to agents.
- **Interface**: Runs `ui.py` on localhost:5000, API-based.
- **Protocol**: Sends `{ "t": "user_request", ... }` to agent ports.

#### Directory
- **Purpose**: Tracks agents in MySQL (`agents` table: `id`, `port`, `capabilities`, `resources`).

### System Architecture
- **Communication**: JSON over TCP sockets (localhost:5000+).
- **AI Integration**: Grok via `prompts/agent_grok_prompt.txt`, auth via `config/grok_api_config.json`.
- **Config**: `config/orchestrator_config.json` (reused), `config/grok_api_config.json`.

### Feature Expansion Process
1. **User Request**: UI sends to an agent.
2. **Analysis**: Agent queries Grok, which uses directory/API.
3. **Execution**: Grok instructs agents independently.

### Next Steps
- Refine tool installation (e.g., Grok instructing agents to install software).
- Enhance UI tab display or MySQL schema.