# Automation System Design Document
Date: March 08, 2025
Author: [Your Name] with assistance from Grok 3 (xAI)

### Overview
This system automates tasks using AI-driven agents, leveraging xAI's Grok models. Agents are general-purpose, capable of any task, differentiated by system resources (CPU, memory, disk) and OS type. The Orchestrator, a special agent, processes user requests via JSON over TCP sockets, delegates tasks it can’t handle, and tracks states with crash recovery. Agents use the Grok API concisely. The UI (Local GUI) supports conversations with job tracking, cancellation, and persistence.

### Terminology
- **Agents**: General-purpose entities, vary by resources and OS.
- **Orchestrator**: Special agent for user interaction and task delegation.
- **Directory Agent**: Registry of agent resources and OS.

### Component Design Principles
- **Program-Based**: Independent agents.
- **Asynchronous**: Orchestrator sends tasks, polls without waiting.
- **State Awareness**: Tracks states with timeouts/retries, persists for crash recovery.
- **Conversation Management**: UI supports conversations, ties jobs to them, allows cancellation, persists on crash.
- **AI Efficiency**: Agents use Grok API concisely, no banter.
- **AI Integration**: Grok API primary.

### Communication with Orchestrator
- **Interface**: Orchestrator on localhost:5005; Local UI Agent (GUI) on localhost:5006.
- **Mechanism**: Async JSON over TCP sockets, polled per `config/orchestrator_config.json`.
- **Context**: Sending agent includes system prompt + history.
- **System Prompt**: In `prompts/orchestrator_system_prompt.txt`.
- **Protocol**: JSON over TCP sockets:
  - To Orchestrator (localhost:5005):
    - UI: `{ "type": "user_request", "request": "<text>", "conversation_id": "<id>", "history": ["<msg1>"] }` → `{ "type": "response", "response": "<text>" }` to 5006.
    - Cancel: `{ "type": "cancel", "conversation_id": "<id>" }`.
    - Resume: `{ "type": "resume", "conversation_id": "<id>", "history": ["<msg1>"], "tasks": ["<task_id1>"] }`.
    - Reconnect: `{ "type": "reconnect", "agent_id": "<id>", "queue": [{"type": "...", ...}] }`.
  - Orchestrator to Directory Agent: `{ "action": "query", "requirements": {"cpu": <int>, "memory": <int>, "os": "<type>"} }` → `{ "agents": [{"id": "<id>", "port": <port>, "resources": {...}}] }`.
  - Orchestrator to Agents: `{ "task": "<task>", "task_id": "<id>", "data": "<data>", "persist": <true/false> }` → `{ "type": "status_update", "task_id": "<id>", "state": "<state>", "result": "<output>" }`.

### Agent-to-Grok API Communication
- **Mechanism**: Concise JSON, no banter, per `prompts/agent_grok_prompt.txt`.

### Crash Recovery
- **Conversation Persistence**: UI saves conversations to file, reloads with "resume".
- **Orchestrator Persistence**: Saves conversation-job mappings to `conversations/<id>/state.json`, reloads from dir tree.
- **Agent Behavior**: Queues messages on Orchestrator crash, retries connecting, reports on reconnect.

### Components
#### Agents
- **Purpose**: General-purpose task execution, vary by resources and OS.
- **Protocol**: `{ "task": "<task>", "task_id": "<id>", "data": "<data>", "persist": <true/false> }` on registered port.

#### Local User Interface Agent (Local UI Agent)
- **Purpose**: User conversation, runs locally.
- **Interface**: Desktop GUI, Grok-like chat, multi-conversation with cancellation.
- **Protocol**: As above, receives on localhost:5006.
- **Crash**: Saves conversations, reloads on restart.

#### Directory Agent
- **Purpose**: Tracks agent resources and OS.
- **Protocol**: `{ "action": "query", "requirements": {...} }` on localhost:5000.

#### Orchestrator
- **Purpose**: Manages user requests, delegates tasks based on resources, tracks Grok API usage.
- **Input**: JSON on localhost:5005.
- **Output**: JSON tasks/responses.
- **State**: Tracks IDs/states in `conversations/<id>/state.json`, reloads from dir tree.
- **Timeouts**: Per `config/orchestrator_config.json`.
- **Grok API**: Uses `prompts/orch_grok_prompt.txt`, auth via `config/grok_api_config.json`.
- **Billing**: Logs usage in `state.json`, aggregates in `billing_summary.json`, uses pricing from `config/grok_api_config.json`.

### System Architecture
- **Communication**: JSON over TCP sockets (localhost:5000+).
- **AI Integration**: Grok API, concise via prompts.
- **Config**: `config/orchestrator_config.json` and `config/grok_api_config.json`.

### Feature Expansion Process
1. **User Request**: UI sends request.
2. **Analysis**: Orchestrator assesses resources, queries Directory Agent.
3. **Execution**: Tasks assigned to capable agents.
4. **Status**: Polls, updates state.

### Next Steps
- Refine Local UI Agent GUI with persistence, job tracking/cancellation, crash reload.
- Design Orchestrator crash recovery, billing features.